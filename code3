# risk_model.py
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
import joblib
import os

# Load dataset
data_path = 'data/project_data.csv'
df = pd.read_csv(data_path)

# Encode categorical columns
label_encoders = {}
for col in ['complexity', 'stakeholder_engagement', 'risk_level']:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Split features and target
X = df.drop('risk_level', axis=1)
y = df['risk_level']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Model training
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Evaluation
y_pred = model.predict(X_test_scaled)
print("ðŸ“Š Classification Report:\n", classification_report(y_test, y_pred))
print("ðŸ“ˆ Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Save model, encoders, scaler
os.makedirs('model', exist_ok=True)
joblib.dump(model, 'model/risk_model.pkl')
joblib.dump(scaler, 'model/scaler.pkl')
joblib.dump(label_encoders, 'model/label_encoders.pkl')

print("âœ… Model saved to model/risk_model.pkl")
